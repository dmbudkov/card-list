import {useEffect, useState, useCallback} from "react"
import axios from "axios"

import useLocalStorage from 'hooks/useLocalStorage'

export default url => {
  const baseUrl = "http://rest-api.noveogroup.com/api/v1"
  const [isLoading, setIsLoading] = useState(false)
  const [response, setResponse] = useState(null)
  const [error, setError] = useState(null)
  const [options, setOptions] = useState({})
  const [token] = useLocalStorage('token')

  const doFetch = useCallback((options = {}) => {
    setOptions(options)
    setIsLoading(true)
  }, [])

  useEffect(() => {
    let skipGetResponseAfterDestroy = false
    if(!isLoading){
      return
    }
    const requestOptions = {
      ...options,
      headers: {
        authorization: token ? `Token ${token}` : ''
      }
    }
    axios(baseUrl + url, requestOptions).then(res => {
      if(!skipGetResponseAfterDestroy) {
        setIsLoading(false)
        setResponse(res.data)
      }
    }).catch(err => {
      if(!skipGetResponseAfterDestroy) {
        setIsLoading(false)
        setError(err.response.data);
      }
    });
    return () => {
      skipGetResponseAfterDestroy = true
    }
  }, [isLoading, options, url, token])

  return [{isLoading, response, error}, doFetch]
}